<installs>
    <install>
        <version>0.0.1</version>
        <tasks>
            <task>
                CREATE TABLE IF NOT EXISTS disease (
                id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
                title varchar(50),
                description text,
                photo varchar(100)
                );
            </task>
            <task>
                CREATE TABLE IF NOT EXISTS service (
                id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
                title varchar(50),
                description text,
                price decimal(10,2)
                );
            </task>
            <task>
                CREATE TABLE IF NOT EXISTS patient (
                id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
                name varchar(50),
                second_name varchar(50),
                referee_name varchar(50),
                referee_photo varchar(100),
                patient_photo varchar(100),
                patient_phone varchar(20),
                referee_phone varchar(20),
                social_security_number varchar(50)
                );
            </task>
            <task>
                CREATE TABLE IF NOT EXISTS role (
                id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
                title varchar(50)
                );
            </task>
            <task>
                CREATE TABLE IF NOT EXISTS acl (
                id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
                route varchar(50)
                );
            </task>
            <task>
                CREATE TABLE IF NOT EXISTS role_acl (
                role_id int NOT NULL,
                acl_id int NOT NULL,
                PRIMARY KEY (role_id, acl_id),
                CONSTRAINT perRole FOREIGN KEY (role_id) REFERENCES role(id) ON DELETE CASCADE ON UPDATE CASCADE,
                CONSTRAINT perAcl FOREIGN KEY (acl_id) REFERENCES acl(id) ON DELETE CASCADE ON UPDATE CASCADE
                );
            </task>
            <task>
                CREATE TABLE IF NOT EXISTS user (
                id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
                name varchar(50),
                second_name varchar(50),
                role_id int NOT NULL,
                patient_id INT,
                photo varchar(100),
                CONSTRAINT perUserRole FOREIGN KEY (role_id) REFERENCES role(id) ON DELETE CASCADE ON UPDATE CASCADE
                );
            </task>
            <task>
                CREATE TABLE IF NOT EXISTS patient_service (
                id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                service_id INT NOT NULL,
                patient_id INT NOT NULL,
                user_id INT NOT NULL,
                date DATE,
                time TIME,
                notes TEXT NULL DEFAULT NULL,
                CONSTRAINT perServicePatient FOREIGN KEY (service_id) REFERENCES service(id) ON DELETE CASCADE ON UPDATE CASCADE,
                CONSTRAINT perPatientService FOREIGN KEY (patient_id) REFERENCES patient(id) ON DELETE CASCADE ON UPDATE CASCADE,
                CONSTRAINT perUserPatientService FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE ON UPDATE CASCADE
                );
            </task>
            <task>
                CREATE TABLE IF NOT EXISTS patient_disease (
                id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                patient_id INT NOT NULL,
                disease_id INT NOT NULL,
                user_id INT NOT NULL,
                illness_start DATE,
                illness_end DATE,
                notes TEXT,
                healthy TINYINT DEFAULT 0,
                CONSTRAINT perPatientDisease FOREIGN KEY (patient_id) REFERENCES patient(id) ON DELETE CASCADE ON UPDATE CASCADE,
                CONSTRAINT perDiseasePatient FOREIGN KEY (disease_id) REFERENCES disease(id) ON DELETE CASCADE ON UPDATE CASCADE,
                CONSTRAINT perUserPatientDisease FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE ON UPDATE CASCADE
                );
            </task>
        </tasks>
    </install>
    <install>
        <version>0.0.2</version>
        <tasks>
            <task>
                ALTER TABLE  `user` ADD  `email` VARCHAR( 50 ) NOT NULL AFTER  `photo` ,
                ADD INDEX (`email`) ;
            </task>
            <task>ALTER TABLE `user` ADD `password` VARCHAR(50) NOT NULL</task>
            <task>
                INSERT INTO `role`(title) VALUES ('admin');
            </task>
            <task>
                INSERT INTO `role`(title) VALUES ('base');
            </task>
            <task>
                INSERT INTO `user`(name, second_name, email, role_id, password) VALUES ('Alexandr', 'Kravchuk', 'swnsma@gmail.com', 1, MD5('test'));
            </task>
            <task>
                INSERT INTO `acl` (`route`) VALUES
                ("lancer_lance_install"),
                ("home"),
                ("users_lists"),
                ("disease_homepage"),
                ("disease_edit"),
                ("disease_new"),
                ("disease_list"),
                ("disease_delete"),
                ("disease_save"),
                ("service_homepage"),
                ("service_edit"),
                ("service_delete"),
                ("service_new"),
                ("service_save"),
                ("services_list"),
                ("lance_acl"),
                ("patient_disease_list"),
                ("patient_service_homepage"),
                ("patient_service_save"),
                ("patient_service_delete"),
                ("patient_service_edit"),
                ("patient_service_new"),
                ("patient_service_list"),
                ("lance_reject_save"),
                ("lance_myaccount"),
                ("report_services"),
                ("report_diseases"),
                ("report_homepage");
            </task>
            <task>
                INSERT INTO `role_acl` (`role_id`, `acl_id`) VALUES
                (1, 1),
                (1, 2), (2, 2),
                (1, 3),
                (1, 4), (2, 4),
                (1, 5),
                (1, 6),
                (1, 7), (2, 7),
                (1, 8),
                (1, 9),
                (1, 10), (2, 10),
                (1, 11),
                (1, 12),
                (1, 13),
                (1, 14),
                (1, 15), (2, 15);
            </task>
            <task>
                CREATE TABLE `secret`(
                user_id INT NOT NULL PRIMARY KEY,
                hash varchar(50),
                CONSTRAINT userHash FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE ON UPDATE CASCADE
                )
            </task>
            <task>
                CREATE TRIGGER generateHash AFTER INSERT ON user
                FOR EACH ROW
                BEGIN
                INSERT INTO `secret` VALUES (NEW.id, MD5(UNIX_TIMESTAMP()));
                END;
            </task>
            <task>
                CREATE TRIGGER generateNewHash BEFORE UPDATE ON user
                FOR EACH ROW
                    BEGIN
                        SELECT password INTO @password FROM user WHERE id = NEW.id;
                        IF @password != NEW.password THEN
                            INSERT INTO `secret` VALUES (NEW.id, MD5(UNIX_TIMESTAMP())) ON DUPLICATE KEY UPDATE `hash`= MD5(UNIX_TIMESTAMP());
                        END IF;
                    END;
            </task>
        </tasks>
    </install>
    <install>
        <version>0.0.3</version>
        <tasks>
            <task>
                CREATE PROCEDURE GetUserSpecifiedPatientDisease(IN userId INT, IN active TINYINT )
                BEGIN
                SELECT patient_disease.id, patient_disease.patient_id, patient_disease.user_id,
                patient_disease.disease_id, patient_disease.illness_start, patient_disease.illness_end,
                patient_disease.healthy, patient_disease.notes, CONCAT(user.name, ' ', user.second_name) as user_name,
                CONCAT(patient.name, ' ', patient.second_name) as patient_name, disease.title
                FROM patient_disease
                INNER JOIN user ON patient_disease.user_id = user.id
                INNER JOIN patient ON patient_disease.patient_id= patient.id
                INNER JOIN disease ON patient_disease.disease_id= disease.id
                WHERE patient_disease.healthy IN(0, active)
                AND patient_disease.user_id = userId
                ORDER BY healthy;
                END;
            </task>
            <task>
                CREATE PROCEDURE GetPatientSpecifiedPatientDisease(IN patientId INT, IN active TINYINT )
                BEGIN
                SELECT patient_disease.id, patient_disease.patient_id, patient_disease.user_id,
                patient_disease.disease_id, patient_disease.illness_start, patient_disease.illness_end,
                patient_disease.healthy, patient_disease.notes, CONCAT(user.name, ' ', user.second_name) as user_name,
                CONCAT(patient.name, ' ', patient.second_name) as patient_name, disease.title
                FROM patient_disease
                INNER JOIN user ON patient_disease.user_id = user.id
                INNER JOIN patient ON patient_disease.patient_id= patient.id
                INNER JOIN disease ON patient_disease.disease_id= disease.id
                WHERE patient_disease.healthy IN(0, active)
                AND patient_disease.patient_id = patientId
                ORDER BY healthy;
                END;
            </task>
            <task>
                CREATE PROCEDURE GetUserSpecifiedPatientService(IN userId INT, IN active TINYINT)
                BEGIN
                SELECT patient_service.id, patient_service.patient_id, patient_service.user_id,
                patient_service.service_id, patient_service.date, patient_service.time, patient_service.notes, CONCAT(user.name, ' ', user.second_name) as user_name, CONCAT(patient.name, ' ', patient.second_name) as patient_name, service.title, service.price
                FROM patient_service INNER JOIN user ON patient_service.user_id = user.id
                INNER JOIN patient ON patient_service.patient_id = patient.id
                INNER JOIN service ON patient_service.service_id = service.id
                WHERE patient_service.user_id = userId AND
                IF(active=1,
                IF(patient_service.date > CURDATE() OR (patient_service.date = CURDATE() AND patient_service.time > CURTIME()), true, false), true)
                ORDER BY date ASC, time DESC;
                END;
            </task>
            <task>
                CREATE PROCEDURE GetPatientSpecifiedPatientService(IN patientId INT, IN active TINYINT)
                BEGIN
                SELECT patient_service.id, patient_service.patient_id, patient_service.user_id,
                patient_service.service_id, patient_service.date, patient_service.time, patient_service.notes, CONCAT(user.name, ' ', user.second_name) as user_name, CONCAT(patient.name, ' ', patient.second_name) as patient_name, service.title
                FROM patient_service INNER JOIN user ON patient_service.user_id = user.id
                INNER JOIN patient ON patient_service.patient_id = patient.id
                INNER JOIN service ON patient_service.service_id = service.id
                WHERE patient_service.patient_id = patientId AND
                IF(active=1,
                IF(patient_service.date > CURDATE() OR (patient_service.date = CURDATE() AND patient_service.time > CURTIME()), true, false), true)
                ORDER BY date ASC, time DESC;
                END;
            </task>
            <task>
                CREATE TABLE rejection(
                id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                code VARCHAR(50),
                label VARCHAR(100),
                status TINYINT DEFAULT 0
                );
            </task>
            <task>
                INSERT INTO rejection (code, label, status)
                VALUES
                ('user',  'Unable to create new user',  '0'),
                ('patient',  'Unable to create new patient',  '0'),
                ('disease', 'Unable to create new disease', '0'),
                ('role', 'Unable to create new role', '0'),
                ('service', 'Unable to create new service', '0'),
                ('patient_service', 'Unable to assign service for patient', '0'),
                ('patient_disease', 'Unable to assign disease for patient', '0');
            </task>
            <task>
                CREATE TRIGGER `reject_check_user` BEFORE INSERT ON  `user`
                FOR EACH
                ROW BEGIN
                SELECT rejection.status
                INTO @status
                FROM rejection
                WHERE code =  'user';
                IF @status =1 THEN SIGNAL SQLSTATE '45000';
                END IF;
                END;
            </task>
            <task>
                CREATE TRIGGER reject_check_service BEFORE INSERT ON service
                FOR EACH
                ROW BEGIN
                SELECT rejection.status
                INTO @status
                FROM rejection
                WHERE code =  'service';
                IF @status =1 THEN SIGNAL SQLSTATE '45000';
                END IF;
                END;
            </task>
            <task>
                CREATE TRIGGER reject_check_disease BEFORE INSERT ON disease
                FOR EACH
                ROW BEGIN
                SELECT rejection.status
                INTO @status
                FROM rejection
                WHERE code =  'disease';
                IF @status =1 THEN SIGNAL SQLSTATE '45000';
                END IF;
                END;
            </task>
            <task>
                CREATE TRIGGER reject_check_patient BEFORE INSERT ON patient
                FOR EACH
                ROW BEGIN
                SELECT rejection.status
                INTO @status
                FROM rejection
                WHERE code =  'patient';
                IF @status =1 THEN SIGNAL SQLSTATE '45000';
                END IF;
                END;
            </task>
            <task>
                CREATE TRIGGER reject_check_role BEFORE INSERT ON role
                FOR EACH
                ROW BEGIN
                SELECT rejection.status
                INTO @status
                FROM rejection
                WHERE code =  'role';
                IF @status =1 THEN SIGNAL SQLSTATE '45000';
                END IF ;
                END;
            </task>
            <task>
                CREATE TRIGGER reject_check_patient_disease BEFORE INSERT ON patient_disease
                FOR EACH
                ROW BEGIN
                SELECT rejection.status
                INTO @status
                FROM rejection
                WHERE code =  'patient_disease';
                IF @status =1 THEN SIGNAL SQLSTATE '45000';
                END IF ;
                END;
            </task>
            <task>
                CREATE TRIGGER reject_check_patient_service BEFORE INSERT ON patient_service
                FOR EACH
                ROW BEGIN
                SELECT rejection.status
                INTO @status
                FROM rejection
                WHERE code =  'patient_service';
                IF @status =1 THEN SIGNAL SQLSTATE '45000';
                END IF ;
                END;
            </task>
            <task>
                CREATE PROCEDURE  `UserTransfer` ( IN  `userId` INT )
                BEGIN
                SELECT patient_id
                INTO @patient
                FROM user
                WHERE id = userId;
                IF @patient =0 THEN INSERT INTO patient( name, second_name, patient_photo )
                SELECT name, second_name, photo
                FROM user
                WHERE id = userId;
                UPDATE user SET patient_id = LAST_INSERT_ID( ) WHERE id = userId;
                END IF ;
                END;
            </task>
        </tasks>
    </install>
</installs>